## Do not edit!
## File managed by saltstack!
{% set cfg = salt['pillar.get']('dovecot:config', {}) -%}
{#- Set some useful MACRO -#}
{%- from "dovecot/macros.jinja" import get_config with context -%}

##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
{{ get_config('log_path', 'syslog', '') }}

# Log file to use for informational messages. Defaults to log_path.
{{ get_config('info_log_path', '') }}
# Log file to use for debug messages. Defaults to info_log_path.
{{ get_config('debug_log_path', '') }}

# Syslog facility to use if you're logging to syslog. Usually if you don't
# want to use "mail", you'll use local0..local7. Also other standard
# facilities are supported.
{{ get_config('syslog_facility', 'daemon', '') }}

##
## Logging verbosity and debugging.
##

# Log unsuccessful authentication attempts and the reasons why they failed.
{{ get_config('auth_verbose', 'no') }}

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
# You can also truncate the value to n chars by appending ":n" (e.g. sha1:6).
{{ get_config('auth_verbose_passwords', 'no') }}

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.
{{ get_config('auth_debug', 'no') }}

# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.
{{ get_config('auth_debug_passwords', 'no') }}

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
{{ get_config('mail_debug', 'no') }}

# Show protocol level SSL errors.
{{ get_config('verbose_ssl', 'no') }}

# mail_log plugin provides more event logging for mail processes.
plugin {
  # Events to log. Also available: flag_change append
  {{ get_config('mail_log_events', 'delete undelete expunge copy mailbox_delete mailbox_rename') }}
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  {{ get_config('mail_log_fields', 'uid box msgid size') }}
}

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
{{ get_config('log_timestamp', '"%b %d %H:%M:%S "') }}

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.
{{ get_config('login_log_format_elements', 'user=<%u> method=%m rip=%r lip=%l mpid=%e %c') }}

# Login log format. %s contains login_log_format_elements string, %$ contains
# the data we want to log.
{{ get_config('login_log_format', '%$: %s') }}
 
# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.
{{ get_config('mail_log_prefix', '"%s(%u): "') }}

# Format to use for logging mail deliveries. See doc/wiki/Variables.txt for
# list of all variables you can use. Some of the common ones include:
#  %$ - Delivery status message (e.g. "saved to INBOX")
#  %m - Message-ID
#  %s - Subject
#  %f - From address
#  %p - Physical size
#  %w - Virtual size
{{ get_config('deliver_log_format', 'msgid=%m: %$') }}
